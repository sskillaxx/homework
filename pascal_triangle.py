# вывести треугольник Паскаля до 9;
# выглядеть должно так:
# [1]
# [1, 1]
# [1, 2, 1]
# [1, 3, 3, 1]
# [1, 4, 6, 4, 1]
# [1, 5, 10, 10, 5, 1]
# [1, 6, 15, 20, 15, 6, 1]
# [1, 7, 21, 35, 35, 21, 7, 1]
# [1, 8, 28, 56, 70, 56, 28, 8, 1]
# [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]

# нечётный ряд (начиная с 1) - одно число в центре, чётный - два
# число в центре нечётного ряда - сумма двух чисел в центре из прошлого чётного ряда
# каждое число сбоку от центрального (или двух центральных) - верхнее сбоку + 1
# при пробеге по каждому ряду чтобы изменить там число нам необходимо начиначать row[1:] и заканчивать row[:-1] чтобы не трогать единицы по краям

pascal_triangle = []
row_limit = int(input('до какого числа вывести? ')) # выводит треугольник в котором последний ряд с числом (row_limit - 1)

for i in range(row_limit):
    row = [1] * (i + 1)
    for j in range(1, len(row) - 1):
        row[j] = pascal_triangle[i - 1][j] + pascal_triangle[i - 1][j - 1]
    pascal_triangle.append(row)

for row in pascal_triangle:
    print(row)
    
# если брать просто len(row), то при попытке взять j-тый элемент получим ошибку, потому что в предыдущем ряду не существует значения с таким индексом
# т.к. по правилам питона ряд начинается с индекса 0 и мы как бы захотим получить индекс, который на 1 больше, чем длинна массива
# пример - берём 5 ряд, при len(row) идём до 4 элемента включительно, но при написании [j] получаем ошибку, так как в 4 ряду не существует индекса 4